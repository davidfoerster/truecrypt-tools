#!/bin/bash
# Mount helper for TrueCrypt volumes
set -e -o pipefail

if [ $# -lt 2 ]; then
	echo 'Error: too few arguments -- I need at least a device and a mount point.' >&2
	exit 2
fi

DEVICE="$1"
MOUNTPOINT="$2"
if [ ! -b "$DEVICE" -o ! -d "$MOUNTPOINT" ]; then
	printf 'Error: „%s“ must be a block device and „%s“ a directory.\n' "$DEVICE" "$MOUNTPOINT" >&2
	exit 2
fi
shift 2


TRUECRYPT="`command -v veracrypt || echo truecrypt`"
case "$TRUECRYPT" in
	*truecrypt)
		TC_CONFIG="$HOME/.TrueCrypt"
		;;
	*)
		TC_CONFIG="${XDG_CONFIG_HOME:-$HOME/.config}/VeraCrypt"
		if [ ! -e "$TC_CONFIG/Configuration.xml" -a -e "$HOME/.VeraCrypt/Configuration.xml" ]; then
			TC_CONFIG="$HOME/.VeraCrypt"
		fi
		;;
else
	
fi
HELPER='helper=truecrypt'
FSTYPE=auto
PROTECTHIDDEN=no
OP=mount
VERBOSE=false; verbose() { "$@"; }
declare -a TCOPTIONS
declare FSOPTIONS MOUNTOPTIONS TCMOUNTOPTIONS KEYFILES PROTECTIONKEYFILES PASSWORD PROTECTIONPASSWORD

print_verbose()
{
	[ "$1" != exec ] || shift
	echo + "$*"
}


if [ $# -gt 0 ]; then
	ARGS="`getopt -n "${0##*/}" -o 'sfnvo:t:' -- "$@"`" || exit 2
	eval set -- "$ARGS"
	unset ARGS

parse_fsoptions()
{
	local IFS=','
	for arg in $1; do
		case "$arg" in
		system|headerbak|nokernelcrypto|timestamp|ts)
			TCMOUNTOPTIONS+="$arg,";;
		readonly|ro)
			TCMOUNTOPTIONS+="$arg,"
			FSOPTIONS+='ro,';;
		auto|noauto|bootwait|nobootwait)
			;;
		keyfile=*)
			KEYFILES+="${arg#*=},";;
		protection-keyfile=*)
			PROTECTIONKEYFILES+="${arg#*=},";;
		password=*)
			PASSWORD="${arg#*=}";;
		protect-hidden=*)
			PROTECTHIDDEN="${arg#*=}";;
		protection-password=*)
			PROTECTIONPASSWORD="${arg#*=}";;
		remount)
			OP=remount
			FSOPTIONS+="$arg,";;
		*)
			FSOPTIONS+="$arg,";;
		esac
	done
	unset arg
}

	while : ; do
		arg="$1"
		case "$arg" in
		-o)
			parse_fsoptions "$2"
			arg=
			shift;;
		-v)
			VERBOSE=true
			verbose() { print_verbose "$@" && "$@"; };;
		-t)
			FSTYPE="${2#truecrypt.}"
			arg=
			shift;;
		-f)
			printf 'Ignoring unimplemented option: %s\n' "$arg" >&2;;
		--)
			shift
			break;;
		*)
			printf 'Invalid option: %s\n' "$arg" >&2
			exit 2;;
		esac
		shift
		MOUNTOPTIONS+="$arg "
	done
	unset arg
fi


default_keyfiles()
{
	if [ -n "$1" ]; then
		local HOME=''"`getent passwd "$1" | cut -d ':' -f 6`"
	elif [ "${HOME:0:1}" != / ]; then
		return 1
	fi
	local -r SOURCE="$TC_CONFIG/Default Keyfiles.xml"
	[ ! -r "$SOURCE" ] || xpath -s ',' -q -e '/TrueCrypt/defaultkeyfiles/keyfile/text()' "$SOURCE"
}


tc_mount()
{
	if [ -z "$KEYFILES" ]; then
		KEYFILES="`default_keyfiles "$SUDO_USER"`"
		if [ -z "$PROTECTIONKEYFILES" ]; then
			PROTECTIONKEYFILES="$KEYFILES"
		fi
	elif [ "$PROTECTHIDDEN" = yes -a -z "$PROTECTIONKEYFILES" ]; then
		PROTECTIONKEYFILES="`default_keyfiles "$SUDO_USER"`"
	fi

	if [ "$PROTECTHIDDEN" = yes ]; then
		TCOPTIONS+=( --protection-password="$PROTECTIONPASSWORD" --protection-keyfiles="$PROTECTIONKEYFILES" )
	fi

	verbose "$TRUECRYPT" --text --mount \
		--mount-options="$TCMOUNTOPTIONS" --filesystem=none \
		--password="$PASSWORD" --keyfiles="$KEYFILES" \
		--protect-hidden="$PROTECTHIDDEN" \
		"${TCOPTIONS[@]}" "$DEVICE"
	MOUNTINFO=( `"$TRUECRYPT" -t -l "$DEVICE"` )
	TCDEVICE="${MOUNTINFO[2]}"
	local -i r=0
	verbose mount -o "$HELPER,$FSOPTIONS" -t "$FSTYPE" $MOUNTOPTIONS "$TCDEVICE" "$MOUNTPOINT" || r=$?

	if [ $r -ne 0 ]; then
		exec >&2
		printf 'Warning: A TrueCrypt block device remains in slot %i.\n' "${MOUNTINFO[0]%:}"
		! $VERBOSE || printf 'TrueCrypt says:\n%s\n' "${MOUNTINFO[*]}"
		exit $r
	fi

	if ! awk -v FS=' ' -v TCDEVICE="$TCDEVICE" '
		BEGIN{ r = 2; }
		{
			if ($1 == TCDEVICE) {
				r = !match($4, "(^|,)'"$HELPER"'($|,)");
				exit;
			}
		}
		END{ exit r; }' \
		/etc/mtab
	then
		verbose exec mount -o "remount,$HELPER" "$TCDEVICE"
	fi
}


tc_remount()
{
	local -ra MOUNTINFO=(`"$TRUECRYPT" -t -l "$MOUNTPOINT"`)
	! $VERBOSE || printf 'TrueCrypt says:\n%s\n' "${MOUNTINFO[*]}" >&2
	if ! [ "$DEVICE" -ef "${MOUNTINFO[1]}" ]; then
		printf 'Error: The specified device „%s“ does not match the mount point „%s“.\n' "$DEVICE" "$MOUNTPOINT" >&2
		exit 1
	fi
	local -r TCDEVICE="${MOUNTINFO[2]}"

	verbose exec mount -o "$FSOPTIONS" -t "$FSTYPE" $MOUNTOPTIONS "$DEVICE" "$MOUNTPOINT"
}


tc_$OP
