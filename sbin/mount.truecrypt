#!/bin/bash
# Mount helper for TrueCrypt volumes

set -e
ARGS="`getopt -n "${0##*/}" -o 'fo:v' --long 'fake,options:,verbose' -- "$@"`" || exit 2
eval set -- "$ARGS"

declare TRUECRYPT=truecrypt
declare -a TCOPTIONS
declare FSTYPE FSOPTIONS MOUNTOPTIONS KEYFILES PROTECTIONKEYFILES PASSWORD PROTECTIONPASSWORD PROTECTHIDDEN=no REMOUNT=false FAKE=false VERBOSE=false

parse_fsoptions() {
	local IFS=','
	for arg in $1; do
		case "$arg" in
		system|headerbak|nokernelcrypto|timestamp|ts)
			MOUNTOPTIONS="$MOUNTOPTIONS,$arg";;
		readonly|ro)
			MOUNTOPTIONS="$MOUNTOPTIONS,$arg"
			FSOPTIONS="$FSOPTIONS,ro";;
		auto|noauto|bootwait|nobootwait)
			;;
		filesystem=*)
			FSTYPE="${arg#*=}"
			TCOPTIONS+=( "--filesystem=$FSTYPE" );;
		keyfile=*)
			KEYFILES="$KEYFILES,${arg#*=}";;
		protection-keyfile=*)
			PROTECTIONKEYFILES="$PROTECTIONKEYFILES,${arg#*=}";;
		password=*)
			PASSWORD="${arg#*=}";;
		protect-hidden=*)
			PROTECTHIDDEN="${arg#*=}";;
		protection-password=*)
			PROTECTIONPASSWORD="${arg#*=}";;
		remount)
			REMOUNT=true #;& #fall through
			FSOPTIONS="$FSOPTIONS,$arg";;
		*)
			FSOPTIONS="$FSOPTIONS,$arg";;
		esac
	done
	unset arg
}

while true; do
	case "$1" in
	-o|--options)
		parse_fsoptions "$2"; shift;;
	-f|--fake)
		FAKE=true;;
	-v|--verbose)
		VERBOSE=true;;
	--)
		shift; break;;
	*)
		echo 'Internal Error!' >&2; exit 127;;
	esac
	shift
done
DEVICE="$1" MOUNTPOINT="$2"


if $REMOUNT; then
	declare -ra MOUNTINFO=(`"$TRUECRYPT" --text --list "$MOUNTPOINT"`)
	if [ "$DEVICE" != "${MOUNTINFO[1]}" ]; then
		echo "Error: The specified device \`$DEVICE' does not match the mountpoint \`$MOUNTPOINT'." >&2
		exit 1
	fi
	DEVICE="${MOUNTINFO[2]}"
	#FSTYPE="`awk -v MOUNTPOINT="$MOUNTPOINT" '{ if ($2==MOUNTPOINT) { print $3; exit; }}' /proc/mounts`"

	MOUNTOPTIONS=
	! $VERBOSE || MOUNTOPTIONS+=' -v'
	! $FAKE || MOUNTOPTIONS+=' -f'
	exec mount $MOUNTOPTIONS -o "$FSOPTIONS" "$DEVICE" "$MOUNTPOINT"

else # $REMOUNT

default_keyfiles() {
	set -e -o pipefail
	[ -z "$1" ] || local -r HOME="`getent passwd "$1" | cut -d: -f6`"
	test -n "$HOME"
	local -r SOURCE="$HOME/.TrueCrypt/Default Keyfiles.xml" IFS=','
	if [ -r "$SOURCE" ]; then
		xpath -s "$IFS" -q -e '/TrueCrypt/defaultkeyfiles/keyfile/text()' "$SOURCE" | head -c "-${#IFS}"
	fi
}

append_arg() {
	while [ -n "$1" -a -n "$2" ]; do
		local VAR="${!2#,}"
		[ -z "$VAR" ] || TCOPTIONS+=( "${1}=${VAR}" )
		shift 2
	done
}
append_arg  --mount-options MOUNTOPTIONS --fs-options FSOPTIONS

if [ -z "$KEYFILES" ]; then
	KEYFILES="`default_keyfiles "$SUDO_USER"`"
	if [ -z "$PROTECTIONKEYFILES" ]; then
		PROTECTIONKEYFILES="$KEYFILES"
	fi
elif [ "$PROTECTHIDDEN" = yes -a -z "$PROTECTIONKEYFILES" ]; then
	PROTECTIONKEYFILES="`default_keyfiles "$SUDO_USER"`"
fi

if [ "$PROTECTHIDDEN" = yes ]; then
	TCOPTIONS+=( --protection-password="$PROTECTIONPASSWORD" --protection-keyfiles="${PROTECTIONKEYFILES#,}" )
fi

declare -ar CMDLINE=( "$TRUECRYPT" --text --password="$PASSWORD" --keyfiles="${KEYFILES#,}" --protect-hidden="$PROTECTHIDDEN" "${TCOPTIONS[@]}" "$DEVICE" "$MOUNTPOINT" )
fi # $REMOUNT

if $VERBOSE; then
	echo "+ ${CMDLINE[@]}" >&2
fi
if ! $FAKE; then
	exec "${CMDLINE[@]}"
fi
